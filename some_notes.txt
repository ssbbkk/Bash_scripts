#!/bin/bash
# This is a basic script
#------------------------------------------------------
# declare -i d=123 		# d is integer
# declare -r e=456		# e is readonly value
# declare -l f="LOLCats" 	# f is lolcats
# declare -u g="LOLCats"        # g is LOLCATS

# echo $SECONDS		# in script: will display how long the script is running, outside script it will show how long the session is running
# echo $0 		# returns the name of the script

# val=$((expession))	# doing an arithmetic operations

# $a * $b	# multiplication
# $a / $b	# division
# $a % $b	# modulo
# $a + $b	# addition
# $a - $b	# substraction
# $a ** $b	# exponentiation

# g=$(echo 1/3 | bc -l)		# bash doesn't handle float numbers, bc can, -l for using the standard math library

#--------------------------------------------------------

# [[ expression ]]		# syntax for comparison, it returns 1: FALSE, or 0: TRUE

# FOR STRINGS COMPARISON:

# [[ $a < $b ]]		# Less than
# [[ $a > $b ]]		# More than
# [[ $a <= $b ]]	# Less than or equal to
# [[ $a >= $b ]]	# Greater than or equal to
# [[ $a == $b ]]	# Equal
# [[ $a != $b ]]	# Not equal

# echo $?		# to display the result of comparison, 1: FALSE, or 0: TRUE

# FOR NUMBERS COMPARISON:

# [[ $a -lt $b ]]        # Less than
# [[ $a -gt $b ]]        # More than
# [[ $a -le $b ]]        # Less than or equal to
# [[ $a -ge $b ]]        # Greater than or equal to
# [[ $a -eq $b ]]        # Equal
# [[ $a -ne $b ]]        # Not equal


# FOR LOGIC OPERATIONS:

# [[ $a && $b ]]	# Logical AND
# [[ $a || $b ]]	# Logical OR
# [[ ! $a ]]		# Logical NOT


# FOR STRING NULL VALUE:

# [[ -z $a ]]		# Checking if string is null
# [[ -n $a ]]		# Checking if is not null

a=""
b="cat"
[[ -z $a && -n $b ]]	# The result is TRUE

a="hello"
b="world"
c=$a$b			
echo $c			# helloworld
echo ${#a}		# will display how long is string a

d=${c:3}		# will display substring of world helloworld starting from letter 3: loworld
d=${c:3:4}		# will display 4 letters of string helloworld starting from letter 4: lowo
d=${c::2}		# will display the first 2 letters of strong helloworld: he
d=${c: -4}		# will display the last 4 letters: orld , before the -4 there must be a space or it won't work 
d=${c: -4:3}		# will display the first 3 letters of the last 4 letters: orl


# ---------------------------------------

# Operators for replacing strings

fruit="apple banana banana cherry"

echo ${fruit/banana/durian}     # will replace the first occurance of word banana in the string named fruit
echo ${fruit//banana/durian}    # will replace the 2 first occurances of word banana in the string named fruit 
echo ${fruit/#apple/durian}	# will replace the word apple only if it occurs at the beginning of the string
echo ${fruit/%cherry/durian}    # will replace the word cherry only if it occurs at the end of the string
echo ${fruit/c*/durian}     	# will replace the first occurance of word starting with letter c in the string named fruit

# --------------------------------------

# COLORING AND STYLING TEXT

echo -e			# enables escape sequences

echo -e '\033[34;42mColor Text \033[0m'		# \033[34;42m - first escape sequence, 
						# \ - for start of escape sequence
						# m - for end of escape sequence
						# \033[0m - to clear formatting after the text
# COLORS (f - foreground, b - background):

# black		f: 33	b: 40
# red		f: 31	b: 41
# green		f: 32	b: 42
# yellow	f: 33	b: 43
# blue		f: 34	b: 44
# magenta	f: 35	b: 45
# cyan		f: 36	b: 46
# white		f: 37	b: 47

# STYLE

# 0 - no style
# 1 - bold
# 2 - low intensity
# 4 - underline
# 5 - blinking
# 7 - reverse
# 8 - invisible


# Example of blinking text:

echo -e "\033[5;31;40mERROR \033[0m\033[31;40mSomething went wrong\033[0m"

flashred="\033[5;31;40m"
red="\033[31;40m"
clear="\033[0m"

echo -e $flashred "ERROR: " $clear $red "Something went wrong" $clear


# ANOTHER STYLE METHOD - TPUT (more info - man terminfo):

tput setaf [0-7]	# foreground
tput setab [0-7]	# background
tput sgr0		# no style
tput bold		# bold
tput dim		# low intensity
tput smul		# underline
tput blink		# blinking
tput rev		# reverse

# black         setaf: 0   setab: 0
# red           setaf: 1   setab: 1
# green         setaf: 2   setab: 2
# yellow        setaf: 3   setab: 3
# blue          setaf: 4   setab: 4
# magenta       setaf: 5   setab: 5
# cyan          setaf: 6   setab: 6
# white 	setaf: 7   setab: 7

# Example:

flashred=$(tput setab 0; tput setaf 1; tput blink)
red=$(tput setab 0; tput setaf 1)
clear=$(tput sgr0)

echo -e $flashred "ERROR: " $clear $red "Something went wrong" $clear


#----------------------------------------------------------------------





